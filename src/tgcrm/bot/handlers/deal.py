"""
Handler –¥–ª—è —Å–¥–µ–ª–æ–∫: –∑–∞–≥—Ä—É–∑–∫–∞ —Å—á–µ—Ç–æ–≤, —Å—Ç–∞—Ç—É—Å—ã, —Å–æ–≤–µ—Ç—ã AI.
"""

from aiogram import Router, types
from aiogram.filters import Command
from tgcrm.services.ai_assistant import AIService

router = Router()


@router.message(Command("upload_invoice"))
async def upload_invoice(message: types.Message, ai: AIService | None = None):
    """–ó–∞–≥—Ä—É–∑–∫–∞ PDF-—Å—á–µ—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ."""
    await message.answer("üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å—á–µ—Ç–∞.")
    if not ai:
        return

    if message.document and message.document.file_name.endswith(".pdf"):
        await message.answer("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...")
        advice = await ai.summarize_invoice("–¢–µ–∫—Å—Ç PDF —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        await message.answer(f"‚úÖ –°—á—ë—Ç –∑–∞–≥—Ä—É–∂–µ–Ω.\nüí¨ {advice}")
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω PDF-—Ñ–∞–π–ª.")


@router.message(Command("change_status"))
async def change_status(message: types.Message, ai: AIService | None = None):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–æ–ø–ª–∞—á–µ–Ω', '–æ—Ç–º–µ–Ω–µ–Ω').")
    if not ai:
        return

    advice = await ai.get_advice(
        "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞."
    )
    await message.answer(f"üí¨ {advice}")
    await message.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

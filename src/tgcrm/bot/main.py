"""
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Telegram-–±–æ—Ç–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π ChatGPT-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
"""

from __future__ import annotations
import asyncio
import logging
from aiogram import Bot, Dispatcher

from tgcrm.config import get_settings
from tgcrm.logging import configure_logging
from tgcrm.services.ai_assistant import AIService
from tgcrm.bot.handlers import (
    start as start_handlers,
    client as client_handlers,
    deal as deal_handlers,
    reminder as reminder_handlers,
    supervisor as supervisor_handlers,
    settings as settings_handlers
)

configure_logging()
logger = logging.getLogger(__name__)


async def main() -> None:
    """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞."""
    settings = get_settings()

    if not settings.telegram.bot_token.strip():
        raise RuntimeError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env")

    bot = Bot(token=settings.telegram.bot_token, parse_mode=settings.telegram.parse_mode)
    dp = Dispatcher()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChatGPT-—Å–µ—Ä–≤–∏—Å–∞
    ai = AIService(api_key=settings.openai.api_key, model=settings.openai.model)
    dp["ai"] = ai  # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ AI –≤ –ª—é–±–æ–º handler

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö router‚Äô–æ–≤
    dp.include_router(start_handlers.router)
    dp.include_router(client_handlers.router)
    dp.include_router(deal_handlers.router)
    dp.include_router(reminder_handlers.router)
    dp.include_router(supervisor_handlers.router)
    dp.include_router(settings_handlers.router)

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.")
